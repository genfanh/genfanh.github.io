<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on genfanh Blog</title>
    <link>https://genfanh.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on genfanh Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 09 Nov 2020 14:57:36 +0800</lastBuildDate><atom:link href="https://genfanh.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>378.有序矩阵中第K小的元素</title>
      <link>https://genfanh.github.io/p/kth-smallest-in-order-matrix/</link>
      <pubDate>Mon, 09 Nov 2020 14:57:36 +0800</pubDate>
      
      <guid>https://genfanh.github.io/p/kth-smallest-in-order-matrix/</guid>
      <description>一、题目 题目
二、解法 方法1：并归排序+最小堆 解法
由题目给出的性质可知，这个矩阵的每一行均为一个有序数组。问题即转化为从这 nn 个有序数组中找第 kk 大的数，可以想到利用归并排序的做法，归并到第 kk 个数即可停止。
一般归并排序是两个数组归并，而本题是 nn 个数组归并，所以需要用小根堆维护，以优化时间复杂度。
具体如何归并，可以参考23. 合并K个升序链表 - 力扣（LeetCode） (leetcode-cn.com)。
代码
func kthSmallest(matrix [][]int, k int) int { h := &amp;amp;IHeap{} // 按行把每行最小数入堆 	for i := 0; i &amp;lt; len(matrix); i++ { heap.Push(h, [3]int{matrix[i][0], i, 0}) } // 从 0 ~ k - 1， 先把最小数出堆，再把最小数所在行的下一个数入堆， 	// 循环 k - 1 次之后， 所有小于 第 k小 的数都不在堆中， 并且最小的第k个数就在堆顶 	for i := 0; i &amp;lt; k - 1; i++ { now := heap.</description>
    </item>
    
    <item>
      <title>384.打乱数组</title>
      <link>https://genfanh.github.io/p/scramble-array/</link>
      <pubDate>Sun, 08 Nov 2020 15:32:46 +0800</pubDate>
      
      <guid>https://genfanh.github.io/p/scramble-array/</guid>
      <description>一、题目 题目
二、解法 方法：Fisher-Yates 洗牌算法
Fisher-Yates 洗牌算法跟暴力算法很像。在每次迭代中，生成一个范围在当前下标到数组末尾元素下标之间的随机整数。接下来，将当前元素和随机选出的下标所指的元素互相交换 - 这一步模拟了每次从 “帽子” 里面摸一个元素的过程，其中选取下标范围的依据在于每个被摸出的元素都不可能再被摸出来了。此外还有一个需要注意的细节，当前元素是可以和它本身互相交换的 - 否则生成最后的排列组合的概率就不对了。
type Solution struct { r *rand.Rand nums []int } func Constructor(nums []int) Solution { return Solution{ r : rand.New(rand.NewSource(time.Now().UnixNano())), nums: nums, } } /** Resets the array to its original configuration and return it. */ func (this *Solution) Reset() []int { return this.nums } /** Returns a random shuffling of the array. */ func (this *Solution) Shuffle() []int { size := len(this.</description>
    </item>
    
    <item>
      <title>189.旋转数组</title>
      <link>https://genfanh.github.io/p/rotate-array/</link>
      <pubDate>Sun, 08 Nov 2020 14:24:44 +0800</pubDate>
      
      <guid>https://genfanh.github.io/p/rotate-array/</guid>
      <description>一、题目 题目
二、解法 1、方法1：使用额外数组 算法
我们可以用一个额外的数组来将每个元素放到正确的位置上，也就是原本数组里下标为 $i$ 的我们把它放到 $(i+k)\% 数组长度$ 的位置。然后把新的数组拷贝到原数组中。
func rotate(nums []int, k int) { size := len(nums) ans := make([]int, size) for i:=0; i&amp;lt;size; i++ { ans[(i+k) % size] = nums[i] } for i:=0; i&amp;lt;size; i++ { nums[i] = ans[i] } } 复杂度分析
 时间复杂度： O(n) 。将数字放到新的数组中需要一遍遍历，另一边来把新数组的元素拷贝回原数组。 空间复杂度： O(n)。另一个数组需要原数组长度的空间。  2、方法2：使用环状替换 算法
如果我们直接把每一个数字放到它最后的位置，但这样的后果是遗失原来的元素。因此，我们需要把被替换的数字保存在变量 temp 里面。然后，我们将被替换数字（temp）放到它正确的位置，并继续这个过程 n 次， n 是数组的长度。这是因为我们需要将数组里所有的元素都移动。但是，这种方法可能会有个问题，如果 $n\%k==0$，其中 $k=k\%n$（因为如果 k 大于 n，移动 k 次实际上相当于移动次$k\%n$）。这种情况下，我们会发现在没有遍历所有数字的情况下回到出发数字。此时，我们应该从下一个数字开始再重复相同的过程。</description>
    </item>
    
    <item>
      <title>139.单词拆分</title>
      <link>https://genfanh.github.io/p/words-split/</link>
      <pubDate>Sat, 07 Nov 2020 16:03:54 +0800</pubDate>
      
      <guid>https://genfanh.github.io/p/words-split/</guid>
      <description>一、题目 题目
二、解法 动态规划 
  初始化 dp=[false, ⋯ , false]，长度为 n+1。n 为字符串长度。dp[i] 表示 s 的前 i 位是否可以用 wordDict 中的单词表示。
  初始化 dp[0]=true，空字符可以被表示。
  遍历字符串的所有子串，遍历开始索引 i，遍历区间 [0,n)：
 遍历结束索引 j，遍历区间 [i+1,n+1)：  若 dp[i]=true且 s[i, ⋯ ,j) 在 wordlist 中：dp[j]=true。解释：dp[i]=true 说明 s 的前 i 位可以用 wordDict 表示，则 s[i, ⋯ ,j) 出现在 wordDict 中，说明 s 的前 j 位可以表示。      返回 dp[n]</description>
    </item>
    
    <item>
      <title>140.单词拆分II</title>
      <link>https://genfanh.github.io/p/words-split-ii/</link>
      <pubDate>Sat, 07 Nov 2020 16:03:54 +0800</pubDate>
      
      <guid>https://genfanh.github.io/p/words-split-ii/</guid>
      <description>一、题目 题目
二、解法 动态规划+回溯  动态规划得到了原始输入字符串的任意长度的 前缀子串 是否可以拆分为单词集合中的单词； 我们以示例 2：s = &amp;quot;pineapplepenapple&amp;quot;、wordDict = [&amp;quot;apple&amp;quot;, &amp;quot;pen&amp;quot;, &amp;quot;applepen&amp;quot;, &amp;quot;pine&amp;quot;, &amp;quot;pineapple&amp;quot;] 为例，分析如何得到所有具体解。  所有任意长度的前缀是否可拆分是知道的，那么如果 后缀子串在单词集合中，这个后缀子串就是解的一部分，例如：
示例
再对比这个问题的输出：
[&amp;quot;pine apple pen apple&amp;quot;,&amp;quot;pineapple pen apple&amp;quot;,&amp;quot;pine applepen apple&amp;quot;]可以发现，树形结构中，从叶子结点到根结点的路径是符合要求的一个解，与以前做过的回溯算法的问题不一样，这个时候路径变量我们需要在依次在列表的开始位置插入元素，可以使用队列实现。
三、代码 func wordBreak(s string, wordDict []string) bool { ans := make([]string, 0) size := len(s) // 使用 map 加速查找 	wordMap := make(map[string]bool, size + 1) for _, word := range wordDict { wordMap[word] = true } // 查找是否有解 	dp := make([]bool, size+1) dp[0] = true for i:=0; i&amp;lt;size; i++ { for j:=i+1; j&amp;lt;=size; j++ { if dp[i] &amp;amp;&amp;amp; wordMap[s[i:j]] { dp[j] = true } } } // 回溯算法，获取所有解 	path := make([]string, 0) var backtracking func(start int) backtracking = func(start int) { if start == size &amp;amp;&amp;amp; dp[size] { tmp := strings.</description>
    </item>
    
    <item>
      <title>131.分割回文串</title>
      <link>https://genfanh.github.io/p/split-palindrome-string/</link>
      <pubDate>Sat, 07 Nov 2020 15:15:03 +0800</pubDate>
      
      <guid>https://genfanh.github.io/p/split-palindrome-string/</guid>
      <description>一、题目 题目
二、解法 回溯+动态规划优化 搜索问题主要使用回溯法。
回溯法思考的步骤：
1、画递归树；
2、根据自己画的递归树编码。
思考如何根据这棵递归树编码：
1、每一个结点表示剩余没有扫描到的字符串，产生分支是截取了剩余字符串的前缀；
2、产生前缀字符串的时候，判断前缀字符串是否是回文。
如果前缀字符串是回文，则可以产生分支和结点； 如果前缀字符串不是回文，则不产生分支和结点，这一步是剪枝操作。 3、在叶子结点是空字符串的时候结算，此时从根结点到叶子结点的路径，就是结果集里的一个结果，使用深度优先遍历，记录下所有可能的结果。
 采用一个路径变量 path 搜索，path 全局使用一个（注意结算的时候，需要生成一个拷贝），因此在递归执行方法结束以后需要回溯，即将递归之前添加进来的元素拿出去； path 的操作只在列表的末端，因此合适的数据结构是栈。  利用「力扣」第 5 题：最长回文子串 的思路，使用空间换时间，利用动态规划把结果先算出来，这样就可以以 O(1) 的时间复杂度直接得到一个子串是否是回文。
三、代码 func partition(s string) [][]string { ans := make([][]string,0) size := len(s) if size == 0 { return ans } // 预处理 	// 使用 dp[i][j] 表示 s[i:j] 是否回文 	dp := make([][]bool, size) for i := range dp { dp[i] = make([]bool, size) } for r:=0; r&amp;lt;size; r++ { for l:=0; l&amp;lt;=r; l++ { if s[l] == s[r] &amp;amp;&amp;amp; (r - l &amp;lt;=2 || dp[l+1][r-1]) { dp[l][r] = true } } } path := make([]string, 0) var backtracking func(start int) backtracking = func (start int) { if start &amp;gt;= size { tmp := make([]string, len(path)) copy(tmp, path) ans = append(ans, tmp) return } for i := start; i &amp;lt; size; i++ { if !</description>
    </item>
    
    <item>
      <title>72.编辑距离</title>
      <link>https://genfanh.github.io/p/edit-distance/</link>
      <pubDate>Thu, 05 Nov 2020 17:51:36 +0800</pubDate>
      
      <guid>https://genfanh.github.io/p/edit-distance/</guid>
      <description>一、题目 题目
二、解法 动态规划 dp[i][j]代表 word1 的前 i 个字符转换成 word2 的前 j 字符需要的最少操作数
所以，
当 word1[i] == word2[j] 时， dp[i][j] = dp[i-1][j-1]
当 word1[i] != word2[j] 时， dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1
其中，dp[i-1][j-1] 表示替换操作， dp[i-1][j] 表示删除操作， dp[i][j-1] 表示插入操作。
注意，针对第一行和第一列需要淡入考虑，如下图所示，引入 &#39;&#39;:

第一行，是 word1 为空时变为 word2 最少要走的步数，也就是插入操作
第一列，是 word2 为空时 word1 变为 word2 最少要走的步数， 也是删除操作
最终结果就是 dp[i][j]
复杂度 时间复杂度： O(m*n)
空间复杂度： O(m*n)
三、代码 func minDistance(word1 string, word2 string) int { n, m := len(word1), len(word2) dp := make([][]int, n+1) // word2 为空时 word1 变为 word2 最少要走的步数  for i:=0; i&amp;lt;=n; i++ { dp[i] = make([]int, m+1) dp[i][0] = i } // word1 为空时变为 word2 最少要走的步数  for j:=0; j&amp;lt;=m; j++ { dp[0][j] = j } for i:=1; i&amp;lt;=n; i++ { for j:=1; j&amp;lt;=m;j++ { if word1[i-1] == word2[j-1] { dp[i][j] = dp[i-1][j-1] } else { dp[i][j] = 1 + min(dp[i-1][j], min(dp[i][j-1], dp[i-1][j-1])) } } } return dp[n][m] } func min(x, y int) int { if x &amp;lt; y { return x } return y } </description>
    </item>
    
    <item>
      <title>322.零钱兑换</title>
      <link>https://genfanh.github.io/p/coin-change/</link>
      <pubDate>Thu, 05 Nov 2020 17:10:50 +0800</pubDate>
      
      <guid>https://genfanh.github.io/p/coin-change/</guid>
      <description>一、题目 题目
二、解法 动态规划 构造动态方程时，我们认为
 dp[i]为凑成i金额所需要的最少硬币的数值  所以，当所有coins面值硬币选择一个时，其凑成的dp[i-coins[j]]的数值是最小时，可以认为dp[i]最小，动态转化表达式可以有
dp[i] = min( dp[i-coins[j]] ) + 1此时最终题解为，
 ans = dp[amount]  复杂度 时间复杂度：O(amount * len(coins) )
空间复杂度：O(amount)
三、代码 func coinChange(coins []int, amount int) int { if amount == 0 { return 0 } dp := make([]int, amount+1) // 初始化所有 i&amp;gt;0 的 dp[i] 为 -1  for i := range dp { if i != 0 { dp[i] = -1 } } n := len(coins) for i:=1; i&amp;lt;=amount; i++ { minVal := math.</description>
    </item>
    
    <item>
      <title>188.买卖股票的最佳时机</title>
      <link>https://genfanh.github.io/p/sell-stock/</link>
      <pubDate>Wed, 04 Nov 2020 20:30:57 +0800</pubDate>
      
      <guid>https://genfanh.github.io/p/sell-stock/</guid>
      <description>一、题目 题目
二、解法 动态规划 状态流转图
交易k次的状态流转图如上图所示。
初始状态时，手中没有股票，在初始状态可以保持该动作，不买不卖直至交易结束。
初始状态只能通过买入进入到买入1状态，当买入1股后，我们可以有以下两种选择：
 啥也不做，保持买入1股状态，直至若干天后择优卖出 马上手上股票，进入卖出1状态  在卖出1状态时，也有两种选择：
 啥也不做，保持手上没有股票动作，直至下一个好时机买入 马上进行第二次买入，进入买入2状态  后面的买入2，保持，卖出2直至卖出k后，就无法在进行交易，只能进入交易结束状态
所以在构造动态规划方程时，使用三个状态变量来表示买卖k次的交易状态
 i表示第i天 k表示已经进行了k次买卖 j表示当前手上是否持有股票  此时我们得到动态规划状态表达式dp[i][k][j]，其中
 dp[i][k][0]表示第i天交易了k次后手上不持有股票的累计最大利润 dp[i][k][1]表示第i天交易了k次后手上持有股票的累计最大利润  此时，我们通过状态转化图，可以有
# 第i天交易k次后手上不持有股票的累计最大利润为， 1、第i-1天k次后手上不持有股票的累计最大利润，或 2、第i-1天k次交易后手上持有股票的累计最大利润加上第i天卖出股票 ； 1或2中的最大值dp[i][k][0] = max( dp[i-1][k][0], d[i-1][k][1] + prices[i] )# 第i天交易k次后手上持有股票的累计最大利润为， 1、第i-1天k次后手上持有股票的累计最大利润，或 2、第i-1天k-1次交易后手上不持有股票的累计最大利润减去第i天买入股票 ； 1或2中的最大值dp[i][k][1] = max( dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])# 此时题目解为 第i天 0~k 次交易后，手上不持有股票的累计利润最大值answer = max(dp[i][0~k][0])三、代码 func maxProfit(k int, prices []int) int { pLen := len(prices) if len(prices) == 0{ return 0 } //一次交易需要2天，如果交易次数大于总的天数/2，那么可以认为k是无穷大，套框架  if k &amp;gt; pLen/2{ return maxProfit_k_Inf(prices) } tmp := make([][2]int, k+1) dp := make([][][2]int, 0) for i:=0; i&amp;lt;pLen;i++{ dp = append(dp, tmp) } for i:=0; i&amp;lt;pLen; i++{ //base case  if i == 0 { for d:=0; d&amp;lt;=k; d++{ dp[i][d][0]=0 dp[i][d][1]=-prices[i] } continue } for j:=k; j&amp;gt;=1; j--{ dp[i][j][0]=max(dp[i-1][j][0], dp[i-1][j][1]+prices[i]) dp[i][j][1]=max(dp[i-1][j][1], dp[i-1][j-1][0]-prices[i]) } } return dp[pLen-1][k][0] } func maxProfit_k_Inf(prices []int) int { if len(prices) == 0 { return 0 } dp := make([][2]int, len(prices)) /* k = +infinity dp[i][k][0]=max(dp[i-1][k][0], dp[i-1][k][1]+prices[i]) dp[i][k][1]=max(dp[i-1][k][1], dp[i-1][k-1][0]-prices[i]) =max(dp[i-1][k][1], dp[i-1][k][0]-prices[i]) 我们发现数组中的 k 已经不会改变了，也就是说不需要记录 k 这个状态了： dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i]) dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i]) */ for i:=0; i&amp;lt;len(prices); i++{ if i-1 == -1{ dp[i][0]=0 dp[i][1]=-prices[i] continue } dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i]) dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i]) } return dp[len(prices)-1][0] } func max(x, y int) int{ if x &amp;gt; y{ return x } return y } </description>
    </item>
    
  </channel>
</rss>
